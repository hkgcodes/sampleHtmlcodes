import org.primefaces.event.RowEditEvent;

public void onAddNew() {
    // Add one new product to the table:
    Product newProduct = new Product((int) (Math.random() * 10000), "f230fh0g3", "New Bamboo Watch",
            "Product Description", "bamboo-watch.jpg", 100, "Accessories", 24, InventoryStatus.INSTOCK, 5);
    products1.add(newProduct);

    FacesMessage msg = new FacesMessage("New Product added", String.valueOf(newProduct.getId()));
    FacesContext.getCurrentInstance().addMessage(null, msg);
    
    // Trigger row edit programmatically for the newly added row
    RowEditEvent<Product> rowEditEvent = new RowEditEvent<>(null, newProduct);
    onRowEdit(rowEditEvent);
}


oncomplete="PF('products1').addRow(); PF('products1').startEdit(PF('products1').data.length - 1);"/>


 private void initiateEditForNewProduct() {
    // This method can be called asynchronously (e.g., after data update)
    FacesContext context = FacesContext.getCurrentInstance();
    DataTable productsTable = (DataTable) context.getViewRoot().findComponent("form:products1");
    if (productsTable != null && productsTable.getData() != null) {
      productsTable.startEdit(productsTable.getData().size() - 1);
    }
  }
private void initiateEditForNewProduct() {
  FacesContext context = FacesContext.getCurrentInstance();
  DataTable productsTable = (DataTable) context.getViewRoot().findComponent("form:products1");
  if (productsTable != null) {
    Object value = productsTable.getValue();
    if (value instanceof Collection) {
      ((Collection) value).size(); // Assuming it's a collection with size method
      productsTable.startEdit(productsTable.getRowIndex()); // Use getRowIndex instead
    }
  }
}








private void initiateEditForNewProduct() {
  FacesContext context = FacesContext.getCurrentInstance();
  DataTable productsTable = (DataTable) context.getViewRoot().findComponent("form:products1");
  if (productsTable != null) {
    Object value = productsTable.getValue();
    if (value != null) {
      try {
        int size = getCollectionSize(value);
        if (size > 0) {
          Object rowKey = productsTable.getRowData();
          if (rowKey != null) {
            productsTable.startEdit(rowKey.toString());
          }
        }
      } catch (Exception e) {
        FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                            "Error initiating edit", e.getMessage());
        FacesContext.getCurrentInstance().addMessage(null, msg);
      }
    }
  }
}

private int getCollectionSize(Object value) {
  if (value instanceof Collection) {
    return ((Collection) value).size();
  } else if (value instanceof Object[]) {
    return ((Object[]) value).length;
  } else {
    throw new UnsupportedOperationException("Unsupported data type for size calculation");
  }
}
