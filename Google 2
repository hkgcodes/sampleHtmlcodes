import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogMasker {

    private static final String MASK_CHAR = "*";
    private final Pattern[] patterns;

    public LogMasker() {
        String[] fieldPatterns = {
            "(?<!\\w)account_no:(?::|=|: )(?<value>[^,\s]+)",
            "(?<!\\w)accountFromAccountNo:(?::|=|: )(?<value>[^,\s]+)",
            "(?<!\\w)payee_acc_no:(?::|=|: )(?<value>[^,\s]+)"
        };
        patterns = new Pattern[fieldPatterns.length];
        for (int i = 0; i < fieldPatterns.length; i++) {
            patterns[i] = Pattern.compile(fieldPatterns[i]);
        }
    }

    private String maskAccountNumber(String value) {
        return MASK_CHAR.repeat(value.length() - 4) + value.substring(value.length() - 4);
    }

    public String maskLogMessage(String logMessage) {
        for (Pattern pattern : patterns) {
            Matcher matcher = pattern.matcher(logMessage);
            StringBuffer maskedMessage = new StringBuffer();
            int start = 0;
            while (matcher.find()) {
                maskedMessage.append(logMessage.substring(start, matcher.start()));
                String value = matcher.group("value");
                maskedMessage.append(maskAccountNumber(value));
                start = matcher.end();
            }
            maskedMessage.append(logMessage.substring(start));
            logMessage = maskedMessage.toString();
        }
        return logMessage;
    }

    public static void maskFile(File inputFile, File outputFile) throws IOException {
        try (FileReader reader = new FileReader(inputFile); FileWriter writer = new FileWriter(outputFile)) {
            StringBuilder fileContent = new StringBuilder();
            char[] buffer = new char[1024];
            int charsRead;
            while ((charsRead = reader.read(buffer)) != -1) {
                fileContent.append(buffer, 0, charsRead);
            }
            String maskedContent = new LogMasker().maskLogMessage(fileContent.toString());
            writer.write(maskedContent);
        } catch (IOException e) {
            System.err.println("Error processing file: " + inputFile.getName() + ". Reason: " + e.getMessage());
        }
    }

    public static void main(String[] args) throws IOException {
        File inputDir = new File(System.getProperty("user.dir"), "INPUT");
        File outputDir = new File(System.getProperty("user.dir"), "OUTPUT");

        // Ensure output directory exists
        if (!outputDir.exists()) {
            outputDir.mkdir();
        }

        if (inputDir.exists() && inputDir.isDirectory()) {
            File[] files = inputDir.listFiles();
            if (files != null) {
                for (File file : files) {
                    maskFile(file, new File(outputDir, file.getName()));
                }
            }
        }
    }
}
