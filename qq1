import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;

public class DynamicQueryToCSV {
    private static final String DB_URL = "jdbc:sqlserver://localhost:1433;databaseName=yourDatabaseName";
    private static final String DB_USER = "yourUsername";
    private static final String DB_PASSWORD = "yourPassword";
    private static final String CSV_FILE_PATH = "StudentProperties.csv";

    public static void main(String[] args) {
        String dynamicQuery = buildDynamicSQLQuery();
        if (dynamicQuery == null) {
            System.out.println("Failed to build dynamic query.");
            return;
        }

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(dynamicQuery);
             ResultSet resultSet = statement.executeQuery();
             FileWriter csvWriter = new FileWriter(CSV_FILE_PATH)) {

            // Write headers
            writeHeaders(resultSet, csvWriter);

            // Write data rows
            writeDataRows(resultSet, csvWriter);

            System.out.println("Data saved to CSV file: " + CSV_FILE_PATH);

        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }

    private static String buildDynamicSQLQuery() {
        StringBuilder sqlQuery = new StringBuilder("SELECT Student_id");
        String propertyQuery = "SELECT DISTINCT Property_name FROM student_properties";

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(propertyQuery);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                String propertyName = resultSet.getString("Property_name");
                sqlQuery.append(", MAX(CASE WHEN Property_name = '")
                        .append(propertyName)
                        .append("' THEN Property_value END) AS [")
                        .append(propertyName)
                        .append("]");
            }

            sqlQuery.append(" FROM student_properties GROUP BY Student_id");
            return sqlQuery.toString();

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static void writeHeaders(ResultSet resultSet, FileWriter csvWriter) throws SQLException, IOException {
        ResultSetMetaData metaData = resultSet.getMetaData();
        int columnCount = metaData.getColumnCount();

        for (int i = 1; i <= columnCount; i++) {
            csvWriter.append(metaData.getColumnName(i));
            if (i < columnCount) csvWriter.append(",");
        }
        csvWriter.append("\n");
    }

    private static void writeDataRows(ResultSet resultSet, FileWriter csvWriter) throws SQLException, IOException {
        while (resultSet.next()) {
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            for (int i = 1; i <= columnCount; i++) {
                String value = resultSet.getString(i);
                csvWriter.append(value != null ? value : ""); // Handle null values
                if (i < columnCount) csvWriter.append(",");
            }
            csvWriter.append("\n");
        }
    }
}