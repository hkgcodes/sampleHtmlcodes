import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogMasker {
    public static void main(String[] args) {
        // Input and output directories
        String inputDirPath = "path_to_input_folder";
        String outputDirPath = "path_to_output_folder";

        // Create output directory if it doesn't exist
        createOutputDirectory(outputDirPath);

        // Process each file in the input directory
        File inputDir = new File(inputDirPath);
        File[] files = inputDir.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    maskLogFile(file, outputDirPath);
                }
            }
        }
    }

    public static void maskLogFile(File inputFile, String outputDirPath) {
        try {
            String fileName = inputFile.getName();
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(outputDirPath + File.separator + fileName));

            String line;
            while ((line = reader.readLine()) != null) {
                line = maskFields(line);
                writer.write(line);
                writer.newLine();
            }
            reader.close();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String maskFields(String line) {
        // Regular expressions to find account numbers
        Pattern accountNoPattern = Pattern.compile("(?:account_no|accountFromAccountNo|payee_acc_no)\":\"(\\d{4})(\\d{4})");
        Matcher matcher = accountNoPattern.matcher(line);

        // Loop through matches and mask the fields
        StringBuffer maskedLine = new StringBuffer();
        while (matcher.find()) {
            String maskedValue = maskDigits(matcher.group(1));
            matcher.appendReplacement(maskedLine, matcher.group().replace(matcher.group(1), maskedValue));
        }
        matcher.appendTail(maskedLine);

        return maskedLine.toString();
    }

    public static String maskDigits(String digits) {
        StringBuilder maskedValue = new StringBuilder();
        for (int i = 0; i < digits.length(); i++) {
            if (i < digits.length() - 4) {
                maskedValue.append("*");
            } else {
                maskedValue.append(digits.charAt(i));
            }
        }
        return maskedValue.toString();
    }

    public static void createOutputDirectory(String outputDirPath) {
        File outputDir = new File(outputDirPath);
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        }
    }
}