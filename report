import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class ReportGenerator extends JFrame {
    private JComboBox<String> dateRangeComboBox;
    private JButton generateButton;
    private JButton copyButton;
    private JPanel reportPanel;
    private String reportText;

    public ReportGenerator() {
        setTitle("Report Generator");
        setSize(400, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new FlowLayout());

        // Date Range Dropdown
        String[] dateRanges = { "Last 7 days", "Last 30 days" };
        dateRangeComboBox = new JComboBox<>(dateRanges);
        add(new JLabel("Select Date Range:"));
        add(dateRangeComboBox);

        generateButton = new JButton("Generate Report");
        add(generateButton);

        reportPanel = new JPanel();
        reportPanel.setLayout(new BoxLayout(reportPanel, BoxLayout.Y_AXIS));
        add(reportPanel);

        copyButton = new JButton("Copy to Clipboard");
        add(copyButton);

        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new Thread(() -> generateReport()).start();
            }
        });

        copyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                copyToClipboard(reportText);
            }
        });

        setVisible(true);
    }

    private void generateReport() {
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(this, "Generating report..."));

        // Simulate report generation
        try {
            Thread.sleep(2000); // Simulate long running task
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Calculate date range
        String selectedRange = (String) dateRangeComboBox.getSelectedItem();
        Calendar calendar = Calendar.getInstance();
        Date endDate = calendar.getTime();
        if ("Last 7 days".equals(selectedRange)) {
            calendar.add(Calendar.DAY_OF_YEAR, -7);
        } else if ("Last 30 days".equals(selectedRange)) {
            calendar.add(Calendar.DAY_OF_YEAR, -30);
        }
        Date startDate = calendar.getTime();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String startDateStr = sdf.format(startDate);
        String endDateStr = sdf.format(endDate);

        // Read Excel and generate report
        File excelFile = chooseFile();
        if (excelFile != null) {
            reportText = generateReportFromExcel(excelFile, startDateStr, endDateStr);

            SwingUtilities.invokeLater(() -> {
                reportPanel.removeAll();

                JTextArea reportArea = new JTextArea(reportText);
                reportArea.setEditable(false);
                reportPanel.add(new JScrollPane(reportArea));

                reportPanel.revalidate();
                reportPanel.repaint();
                JOptionPane.showMessageDialog(this, "Report generated:\n" + reportText);
            });
        }
    }

    private File chooseFile() {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    private String generateReportFromExcel(File file, String startDate, String endDate) {
        StringBuilder report = new StringBuilder();
        Map<String, Map<String, Integer>> groupCommits = new HashMap<>();

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 3) {
                    String groupId = parts[0];
                    String groupName = parts[1];
                    String email = parts[2];

                    // GitLab API call
                    List<String> commits = getCommitsFromGitLab(groupId, startDate, endDate);

                    // Count commits
                    Map<String, Integer> userCommits = groupCommits.getOrDefault(groupName, new HashMap<>());
                    for (String commit : commits) {
                        userCommits.put(commit, userCommits.getOrDefault(commit, 0) + 1);
                    }
                    groupCommits.put(groupName, userCommits);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Format report
        for (Map.Entry<String, Map<String, Integer>> entry : groupCommits.entrySet()) {
            report.append(entry.getKey()).append(":\n");
            for (Map.Entry<String, Integer> userCommit : entry.getValue().entrySet()) {
                report.append(userCommit.getKey()).append(" : ").append(userCommit.getValue()).append(" Commits\n");
            }
        }

        return report.toString();
    }

    private List<String> getCommitsFromGitLab(String groupId, String startDate, String endDate) {
        List<String> commits = new ArrayList<>();
        try {
            String url = "https://gitlab.com/api/v4/groups/" + groupId + "/projects";
            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("PRIVATE-TOKEN", "YOUR_PRIVATE_TOKEN"); // Replace with your GitLab private token

            if (conn.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Parse response and extract project IDs
                List<String> projectIds = extractProjectIds(response.toString());

                // Get commits for each project
                for (String projectId : projectIds) {
                    commits.addAll(getCommitsForProject(projectId, startDate, endDate));
                }
            } else {
                System.out.println("GET request failed: " + conn.getResponseCode());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return commits;
    }

    private List<String> extractProjectIds(String jsonResponse) {
        // Simple extraction logic, replace with proper JSON parsing
        List<String> projectIds = new ArrayList<>();
        String[] projects = jsonResponse.split("id\":");
        for (int i = 1; i < projects.length; i++) {
            String projectId = projects[i].split(",")[0].trim();
            projectIds.add(projectId);
        }
        return projectIds;
    }

    private List<String> getCommitsForProject(String projectId, String startDate, String endDate) {
        List<String> commits = new ArrayList<>();
        try {
            String url = "https://gitlab.com/api/v4/projects/" + projectId + "/repository/commits?since=" + startDate + "T00:00:00Z&until=" + endDate + "T23:59:59Z";
            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("PRIVATE-TOKEN", "YOUR_PRIVATE_TOKEN"); // Replace with your GitLab private token

            if (conn.getResponseCode() == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Parse response and extract commit author names
                commits.addAll(extractCommitAuthors(response.toString()));
            } else {
                System.out.println("GET request failed: " + conn.getResponseCode());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return commits;
    }

    private List<String> extractCommitAuthors(String jsonResponse) {
        // Simple extraction logic, replace with proper JSON parsing
        List<String> authors = new ArrayList<>();
        String[] commits = jsonResponse.split("author_name\":\"");
        for (int i = 1; i < commits.length; i++) {
            String author = commits[i].split("\"")[0].trim();
            authors.add(author);
        }
        return authors;
    }

    private void copyToClipboard(String text) {
        StringSelection stringSelection = new StringSelection(text);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        JOptionPane.showMessageDialog(this, "Report copied to clipboard!");
    }

    public static void main(String[] args) {
        new ReportGenerator();
    }
}
